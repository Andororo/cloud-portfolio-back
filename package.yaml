AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'cloud-portfolio-site

  Sample SAM Template for cloud-portfolio-site test'
Resources:
  siteBucket:
    Type: AWS::S3::Bucket
    Properties:
      WebsiteConfiguration:
        IndexDocument: resume.html
      BucketName: andrewclouddevs3sam
      OwnershipControls:
        Rules:
        - ObjectOwnership: BucketOwnerEnforced
    Metadata:
      SamResourceId: siteBucket
  MyRoute53Record:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: Z0313210SY9VL0X3YX74
      RecordSets:
      - Name: sam.andrewclouddev.net
        Type: A
        AliasTarget:
          HostedZoneId: Z2FDTNDATAQYW2
          DNSName:
            Fn::GetAtt:
            - AndrewCloudDevSiteCloudFront
            - DomainName
    Metadata:
      SamResourceId: MyRoute53Record
  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: siteBucket
      PolicyDocument:
        Version: '2012-10-17'
        Id: PolicyForCloudFrontPrivateContent
        Statement:
        - Sid: AllowCloudFrontServicePrincipal
          Effect: Allow
          Principal:
            Service: cloudfront.amazonaws.com
          Action: s3:GetObject
          Resource:
            Fn::Sub: arn:aws:s3:::${siteBucket}/*
          Condition:
            StringEquals:
              AWS:SourceArn:
                Fn::Sub: arn:aws:cloudfront::039612843096:distribution/${AndrewCloudDevSiteCloudFront}
    Metadata:
      SamResourceId: BucketPolicy
  CloudFrontOAC:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: Serverless website OAC
        SigningProtocol: sigv4
        SigningBehavior: always
        OriginAccessControlOriginType: s3
    Metadata:
      SamResourceId: CloudFrontOAC
  AndrewCloudDevSiteCloudFront:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
        - DomainName:
            Fn::Sub: ${siteBucket}.s3.us-west-2.amazonaws.com
          Id: S3Origin
          S3OriginConfig: {}
          OriginAccessControlId:
            Ref: CloudFrontOAC
        Enabled: 'true'
        Aliases:
        - sam.andrewclouddev.net
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
          - GET
          - HEAD
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn: arn:aws:acm:us-east-1:039612843096:certificate/a6f48e21-d3ee-450d-821f-4e90801239ad
          SslSupportMethod: sni-only
        DefaultRootObject: resume.html
        HttpVersion: http2
    Metadata:
      SamResourceId: AndrewCloudDevSiteCloudFront
  UpdateVisitorTableLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.lambda_handler
      Runtime: python3.12
      CodeUri: s3://andrewclouddev-code-sam/a78337deb474d337dc0edad2e2493816
      Description: Update/retrieve dynamoDB table
      MemorySize: 128
      Timeout: 3
      Environment:
        Variables:
          TABLE_NAME:
            Ref: VisitorDynamoDBTable
          REGION_NAME:
            Ref: AWS::Region
      Events:
        UpdateVisitorTablePOST:
          Type: Api
          Properties:
            Path: /update_table
            Method: POST
            RestApiId:
              Ref: UpdateVisitorTableAPI
        UpdateVistorTableGET:
          Type: Api
          Properties:
            Path: /update_table
            Method: GET
            RestApiId:
              Ref: UpdateVisitorTableAPI
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: VisitorDynamoDBTable
    Metadata:
      SamResourceId: UpdateVisitorTableLambda
  UpdateVisitorTableAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowMethods: '''OPTIONS,POST,GET'''
        AllowOrigin: '''*'''
        AllowHeaders: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
    Metadata:
      SamResourceId: UpdateVisitorTableAPI
  VisitorDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: site_name
        AttributeType: S
      KeySchema:
      - AttributeName: site_name
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: '1'
        WriteCapacityUnits: '1'
      TableName: VisitedTable_SAM
    Metadata:
      SamResourceId: VisitorDynamoDBTable
Outputs:
  VisitorDynamoDBTable:
    Description: Name of the DynamoDB Table
    Value:
      Ref: VisitorDynamoDBTable
  UpdateVisitorTableLambda:
    Description: UpdateVistitor Table lambda function ARN
    Value:
      Fn::GetAtt:
      - UpdateVisitorTableLambda
      - Arn
  UpdateVisitorTableAPI:
    Description: API Gateway URL
    Value:
      Fn::Sub: https://${UpdateVisitorTableAPI}.execute-api.${AWS::Region}.amazonaws.com/Prod/update_table
  siteBucket:
    Description: The S3 URI of the bucket
    Value:
      Fn::Sub: s3://${siteBucket}/
